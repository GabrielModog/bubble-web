// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id String @id @default(uuid())
  email String
  firstName String
  lastName String
  imageUrl String?
  username String? @unique
  bubblesCreated Bubble[]
  createdAt DateTime @default(now())
  votes Vote[]
  comments Comment[]
  blobs Blob[]
}

model Bubble {
  id String @id @default(uuid())
  name String @unique
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User? @relation(fields: [userId], references: [id])
  userId String?
  blobs Blob[]
}

model Blob {
  id String @id @default(uuid())
  title String
  textContent Json?
  imageUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bubble Bubble? @relation(fields: [bubbleName], references: [name])
  bubbleName String?
  user User? @relation(fields: [userId], references: [id])
  userId String?
  votes Vote[]
  comments Comment[]
}

enum VoteType {
  UP
  DOWN
}

model Vote {
  id String @id @default(uuid())
  blob Blob? @relation(fields: [blobId], references: [id])
  blobId String?
  user User? @relation(fields: [userId], references: [id])
  userId String?
  voteType VoteType
}

model Comment {
  id String @id @default(uuid())
  text String
  createdAt DateTime @default(now())
  blob Blob? @relation(fields: [blobId], references: [id])
  blobId String?
  user User? @relation(fields: [userId], references: [id])
  userId String?
}